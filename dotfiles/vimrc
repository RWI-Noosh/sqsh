let g:pathogen_disabled = []
call pathogen#infect()

filetype plugin indent on
set laststatus=2 ruler
set sts=4 ts=4 sw=4 et
set ai
set ic hls smartcase incsearch
set showmatch matchtime=2  " paren-matching
set wim=list:longest
set backup
set grepprg=ag
set bs=2
set complete=.,w  " stay fast by only suggesting completions from open windows
ino jk <esc>

" Leader
let mapleader = 's'
nn <leader> <nop>

" Display
syntax enable
set guioptions='cM'
set t_Co=16
set background=dark
colorscheme solarized

" Emacs emulation in Cmdline mode.
cnoremap <C-S>      <C-D>
cnoremap <C-A>		<Home>
cnoremap <C-B>		<Left>
cnoremap <C-D>		<Del>
cnoremap <C-E>		<End>
cnoremap <C-F>		<Right>
cnoremap <C-N>		<Down>
cnoremap <C-P>		<Up>

" Quickfix
nn <leader>j :cn<cr>
nn <leader>k :cp<cr>

" Arglist
nn <leader>n :wn<cr>
nn <leader>N :N<cr>

" vimrc
nn <leader>ve :e ~/.vimrc<cr>
nn <leader>vn :new ~/.vimrc<cr>
nn <leader>vs :source ~/.vimrc<cr>

" Various conveniences
nn <leader>p :set paste!<cr>
nn <leader>h :noh<cr>
nn <leader>x :source ~/source.vim<cr>
nn Y y$


" Plugin configuration
let g:ConqueTerm_CWInsert = 1
let g:NERDTreeDirArrows=0
let g:pyflakes_use_quickfix = 0
let g:CommandTMaxHeight = 20
let g:probe_ignore_files = ['\~$', '_build']

command! ProbeFindTc :cal probe#open(
    \ function('probe#tc#scan'),
    \ function('probe#tc#open'),
    \ function('probe#tc#refresh'))
nn <leader>q :ProbeFindTc<cr>
nn <leader>d :ProbeFindFile<cr>


function! SourceRange() range
    let tmpsofile = tempname()
    call writefile(getline(a:firstline, a:lastline), l:tmpsofile)
    execute "source " . l:tmpsofile
    call delete(l:tmpsofile)
endfunction
command! -range Source <line1>,<line2>call SourceRange()

function! WwnToVplex() range
    exe printf("%d,%ds/\\v([0-9a-f]{2}:){7}/\\='0x' . substitute(submatch(0), ':', '', 'g')/g", a:firstline, a:lastline )
endfunction


"========================================
" Compilers
"========================================
" Fill the quick-fix list with pylint output. Run pylint on the current file.
function! Pylint()
    let &l:makeprg = "pylint -f parseable -i y -r n %"
    let &l:efm = "%f:%l: %m"
    make!
endfunction
command! Pl call Pylint()

function! GitTrailingWhitespace(...)
    let prefix = util#trim(system("git rev-parse --show-prefix"))
    let &l:makeprg = "git diff --check " . join(a:000)
    let &l:efm = prefix . "%f:%l: %m"
    make!
endfunction
command! -nargs=* Gtw call GitTrailingWhitespace('<args>')

" Fill the quick-fix list with pylint output. Run pylint on all the files
" changed since the last commmit (default) or between given revisions, which
" are passed straight to git diff.
function! PylintGit(...)
    let command = "git diff --name-only " . join(a:000)
    let pathsFromRepoRoot = split(system(command), "\n")
    let prefixLength = strlen(util#trim(system("git rev-parse --show-prefix")))
    let paths = []
    for path in pathsFromRepoRoot
        call add(paths, strpart(path, prefixLength))
    endfor
    let &l:makeprg = "pylint -f parseable -i y -r n " . join(paths, ' ')
    let &l:efm = "%f:%l: %m"
    make!
endfunction
command! -nargs=* Pg call PylintGit('<args>')

" Set the quickfix list to chunks of changes as shown by git diff.
" Passes its arguments straight to git diff, so by default it diffs the working
" directory with HEAD.
" Sets the first non-empty changed line as the description, if possible.
" This could probably be converted to an errorformat.
function! SetGitDiffAsQuickFixList(...)
    let command = "git diff -U0 " . join(a:000)
    let lines = split(system(command), '\n')
    " Relative paths would be nice but absolute paths are far easier.
    let repoRoot = util#trim(system("git rev-parse --show-toplevel"))
    let file = ''
    let locList = []
    let i = 0
    while i < len(lines)
        let line = lines[i]
        if match(line, '^diff') != -1
            let file = repoRoot .  '/' . matchlist(line, '\v b/(.*)$')[1]
        elseif match(line, '^@@') != -1
            let lineNum = matchlist(line, '\v.* \+(\d*)')[1]
            let descIndex = i + 1
            while len(lines[descIndex]) == 1 && descIndex < len(lines) - 1
                let descIndex += 1
            endwhile
            if match(lines[descIndex], '^diff\|^@@') != -1
                let descIndex = i + 1
            endif
            call add(locList, {'filename': file, 'lnum': lineNum, 'text': lines[descIndex]})
        endif
        let i += 1
    endwhile
    call setqflist(locList)
endfunction
command! -nargs=* Gdqf call SetGitDiffAsQuickFixList('<args>')

function! SilentMake(...)
    if a:0 >= 1
        execute "silent! make! " . a:1
    else
        silent! make!
    endif
    redraw!
endfunction
com! -nargs=? Make call SilentMake(<f-args>)


" Tips
"
" Evaluate viml in Cmdline mode using <c-r>=
"
" Globally replace the word under the cursor with something else:
" :nn <leader>r :exec printf('%%s#\<%s\>#self.%s#g', expand('<cword>'), expand('<cword>'))<cr>
"
" Use substitute and eval together:
" '<,'>s/{{\([^}]\+\)}}/\=eval(submatch(1))/g
